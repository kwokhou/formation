#!/usr/bin/env bash

export LC_ALL=en_US.UTF-8

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Formation failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

if [ -e twirl ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "twirl"
else
	printf "\n ⚠️  ./twirl not found  💃🏾 First, you need to twirl on your haters\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "
   _
  | |
  | |  __   ,_    _  _  _    __, _|_ 🍋  __   _  _
  |/  /  \_/  |  / |/ |/ |  /  |  |  |  /  \_/ |/ |
  |__/\__/    |_/  |  |  |_/\_/|_/|_/|_/\__/   |  |
  |\  ---------------------------------------------
  |/  Cause you slay           [for Bash 3.2 - 3.9]
╭───────────────────────────────────────────────────╮
│  Okay developers now let's get in ${bold}formation${normal}.      │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"


###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password…"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key…'
ssh_key_setup

###############################################################################
# macOS Tweak
###############################################################################
chapter "Apply macOS related tweaks"

defaults write com.apple.finder QLEnableTextSelection -bool TRUE
print_success "Allow text selection in Quick Look!"

defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
print_success "Saving to disk (not to iCloud) by default"

defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
print_success "Disable smart quotes & dashes"

defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
print_success "Enabling full keyboard access for all controls (e.g. enable Tab in modal dialogs)"

defaults write NSGlobalDomain AppleFontSmoothing -int 2
print_success "Enabling subpixel font rendering on non-Apple LCDs"

defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
print_success "Showing icons for hard drives, servers, and removable media on the desktop"

defaults write NSGlobalDomain AppleShowAllExtensions -bool true
print_success "Showing all filename extensions in Finder by default"

defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
print_success "Disabling the warning when changing a file extension"

defaults write com.apple.finder FXPreferredViewStyle Clmv
print_success "Use column view in all Finder windows by default"

defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
print_success "Avoiding the creation of .DS_Store files on network volumes"


/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
print_success "Enabling snap-to-grid for icons on the desktop and in other icon views"


defaults write com.apple.dock tilesize -int 36
print_success "Setting the icon size of Dock items to 36 pixels for optimal size/screen-realestate"

defaults write com.apple.dock expose-animation-duration -float 0.1
defaults write com.apple.dock "expose-group-by-app" -bool true
print_success "Speeding up Mission Control animations and grouping windows by application"

defaults write com.apple.dock autohide -bool true
defaults write com.apple.dock autohide-delay -float 0
defaults write com.apple.dock autohide-time-modifier -float 0
print_success "Setting Dock to auto-hide and removing the auto-hiding delay"


defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
print_success "Preventing Time Machine from prompting to use new hard drives as backup volume"


defaults write com.apple.screencapture location -string "$HOME/Desktop"
print_success "Setting screenshots location to ~/Desktop"


defaults write com.apple.screencapture type -string "png"
print_success "Setting screenshot format to PNG"

defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
print_success "Disable 'natural' (Lion-style) scrolling"

defaults write com.apple.dock mru-spaces -bool false
print_success "Don’t automatically rearrange Spaces based on most recent use"

killall Finder

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies…"

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# Download dotfiles
# -----------------------------------------------------------------------------
if [ -d "$HOME/bin/dotfiles" ]; then
	print_success_muted "dotfiles already installed. Skipping."
else
	step "Installing dotfiles…"
	mkdir -p ~/bin/
	git clone https://github.com/kwokhou/dotfiles.git ~/bin/dotfiles
	print_success "dotfiles downloaded!"
fi


# -----------------------------------------------------------------------------
# Asdf-vm
# -----------------------------------------------------------------------------
if [ -d "$HOME/.asdf" ]; then
	print_success_muted "asdf-vm already installed. Skipping."
else
	step "Installing asdf-vm…"
	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
	git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.3
	echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.zshrc
	echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.zshrc
	echo -e '\nlegacy_version_file = yes' >> ~/.asdfrc
	echo -e '' >> ~/.default-npm-packages
	echo -e '\nbundler' >> ~/.default-gems
	print_success "asdf-vm installed!"
fi


# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask…"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/swag/brews ]; then
	chapter "Installing Homebrew formulae…"

	for brew in $(<$cwd/swag/brews); do
		install_brews $brew
	done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/swag/casks ]; then
	chapter "Installing apps via Homebrew…"

	for cask in $(<$cwd/swag/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store…"
if [ -x mas ]; then

	print_warning "Please install mas-cli first: brew mas. Skipping."

	else

	if [ -e $cwd/swag/apps ]; then
		if mas_setup; then
			# Workaround for associative array in Bash 3
			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
			for app in $(<$cwd/swag/apps); do
				KEY="${app%%::*}"
				VALUE="${app##*::}"
				install_application_via_app_store $KEY $VALUE
			done
		else
			print_warning "Please signin to App Store first. Skipping."
		fi
	fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/swag/npm ]; then
	chapter "Installing npm packages…"

	for pkg in $(<$cwd/swag/npm); do
		KEY="${pkg%%::*}"
		VALUE="${pkg##*::}"
		install_npm_packages $KEY $VALUE
	done
fi


###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Adding hot sauce…"
if [ -f "$HOME/.hot-sauce" ]; then
	if ask "Do you want to add hot sauce?" Y; then
		. "$HOME/.hot-sauce"; printf "\n  You got hot sauce in your bag. 🔥 ${bold}Swag.${normal}\n";
	else
		print_success_muted "Hot sauce declined. Skipped.";
	fi
else
	print_warning "No ~/.hot-sauce found. Skipping."
fi

###############################################################################
# 🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋
###############################################################################
e_lemon_ated
